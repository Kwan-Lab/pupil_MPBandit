function [ trials ] = value_getTrialMasks( trialData )
% % value_getTrialMasks %
%PURPOSE:   Create data structures: 'trials' containing logical masks, and
%           'stats' containing dummy codes for task variables.
%AUTHORS:   H Atilgan and AC Kwan 191202
%
%INPUT ARGUMENTS
%   trialData:  Structure generated by value_getSessionData()
%
%OUTPUT VARIABLES
%   trials:     Structure containing fields, each a logical mask
%               indicating whether animal made a left choice 
%               (e.g., trials.left)

nTrials = numel(trialData.cueTimes);

%GET CODES FROM PRESENTATION
[STIM,RESP,OUTCOME,RULE,EVENT] = value_getPresentationCodes(trialData.presCodeSet);

taskVar = {'cue' 'response' 'outcome' 'rule'};

for i = 1:numel(taskVar)
    clear codes;
    switch taskVar{i}
        case 'cue'
            codes.go = [STIM.GO];
        case 'response'
            codes.left = [RESP.LEFT];
            codes.right = [RESP.RIGHT];
        case 'outcome'
            codes.reward = [OUTCOME.REWARDLEFT OUTCOME.REWARDRIGHT];
            codes.noreward = [OUTCOME.NOREWARDLEFT OUTCOME.NOREWARDRIGHT];
            codes.miss = [OUTCOME.MISS OUTCOME.REWARDMANUAL];
        case 'rule'
            if isfield(RULE,'STARTEXPTLEFT')   %matching pennies
                codes.compleft = [RULE.STARTEXPTLEFT];
                codes.compright = [RULE.STARTEXPTRIGHT];
            elseif trialData.presCodeSet==3  || trialData.presCodeSet==8 || trialData.presCodeSet==21 || trialData.presCodeSet==22 || trialData.presCodeSet==31
                codes.L70R10 = [RULE.L70R10];
                codes.L10R70 = [RULE.L10R70];
            elseif trialData.presCodeSet==6
                codes.L70R30 = [RULE.L70R30];
                codes.L70R10 = [RULE.L70R10];
                codes.L30R10 = [RULE.L30R10];
                codes.L30R70 = [RULE.L30R70];
                codes.L10R70 = [RULE.L10R70];
                codes.L10R30 = [RULE.L10R30];
            end
    end
    fields = fieldnames(codes);
    for j = 1:numel(fields)
        trials.(fields{j}) = ismember(trialData.(taskVar{i}),codes.(fields{j})); %Generate trial mask for each field in 'codes'
    end
end

%% Check consistency among the extracted trial values
if sum(trials.reward)+sum(trials.noreward)+sum(trials.miss) ~= nTrials
    disp([num2str(sum(trials.reward)) ' + ' num2str(sum(trials.noreward)) ' + ' num2str(sum(trials.miss)) ' versus ' num2str(nTrials)]);
    error('ERROR in value_getTrialMasks: check #1 reward+no reward+miss = nTrial');
elseif sum(trials.left)+sum(trials.right)+sum(trials.miss) ~= nTrials
    disp([num2str(sum(trials.left)) ' + ' num2str(sum(trials.right)) ' + ' num2str(sum(trials.miss)) ' versus ' num2str(nTrials)]);
    error('ERROR in value_getTrialMasks: check #2 left+right+miss = nTrial');
end

if isfield(trials,'L10R30')     %six sets of reward prob
    if sum(trials.L70R10) + sum(trials.L10R70) + sum(trials.L70R30) + sum(trials.L30R70) + sum(trials.L30R10) + sum(trials.L10R30) ~= nTrials
        disp('ERROR in value_getTrialMasks: check #3');
    end
elseif isfield(trials,'L70R10') %two sets of reward prob
    if sum(trials.L70R10) + sum(trials.L10R70) ~= nTrials
        disp('ERROR in value_getTrialMasks: check #4');
    end
end

end

